{"version":3,"sources":["algorithm/Node.ts","components/Result.tsx","components/Anagram.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Node","letter","final","depth","childrens","letters","node","this","chars","toLowerCase","forEach","char","index","undefined","length","minWordSize","tiles","replaceAll","minLength","anagrams","path","root","word","join","Object","entries","count","Result","props","useState","filterPermutations","setFilterPermutations","minWordLength","setMinWordLength","minMaxWordLength","setMinMaxWordLength","contains","setContains","startWith","setStartWith","diplayedAnagrams","uniques","Set","map","sentence","split","sort","filter","every","find","includes","startsWith","htmlFor","type","id","value","onChange","e","parseInt","target","onClick","a","i","newRoot","Anagram","setAnagrams","isLoading","setIsLoading","setSentence","useEffect","fetch","process","then","r","text","body","entry","add","searchAnagrams","results","Array","from","anagram","preventDefault","onSubmit","name","autoFocus","disabled","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94c923ee.chunk.js","sourcesContent":["// Source: https://prograide.com/pregunta/46535/algorithme-pour-generer-des-anagrammes\n\nexport class Node {\n    static newRoot(): Node {\n        return new Node('', false, 0);\n    }\n\n    constructor(public readonly letter: string,\n                public final: boolean,\n                public readonly depth: number,\n                public childrens: { [k in string]: Node } = {}) {\n    }\n\n    public add(letters: string): void {\n        let node: Node = this;\n        const chars = [...letters.toLowerCase()];\n        chars.forEach((char, index) => {\n            if (node.childrens[char] === undefined) {\n                node.childrens[char] = new Node(char, index === chars.length - 1, index + 1)\n            }\n            node = node.childrens[char];\n        });\n    }\n\n    public anagram(letters: string, minWordSize = 3): Generator<string> {\n        const tiles: { [k in string]: number } = {};\n        const chars = [...letters.replaceAll(' ', '').toLowerCase()];\n        chars.forEach((char) => {\n            tiles[char] = (tiles[char] || 0) + 1\n        });\n        const minLength = chars.length;\n        return this.anagrams(tiles, [], this, minLength, minWordSize);\n    }\n\n    private* anagrams(tiles: { [p: string]: number }, path: string[], root: Node, minLength: number, minWordSize: number): Generator<string> {\n        if (this.final && this.depth >= minWordSize) {\n            const word = path.join('');\n            const length = word.replaceAll(' ', '').length;\n            if (length >= minLength) {\n                yield word;\n            }\n            for (const word of root.anagrams(tiles, [...path, ' '], root, minLength, minWordSize)) {\n                yield word;\n            }\n        }\n        for (const [letter, node] of Object.entries(this.childrens)) {\n            const count = tiles[letter] || 0;\n            if (count === 0) {\n                continue;\n            }\n            tiles[letter] = count - 1;\n            for (const word of node.anagrams(tiles, [...path, letter], root, minLength, minWordSize)) {\n                yield word;\n            }\n            tiles[letter] = count;\n        }\n    }\n}\n","import React, {useState} from \"react\";\n\nexport interface Props {\n    anagrams: string[]\n}\nexport const Result: React.FC<Props> = (props) => {\n    const [filterPermutations, setFilterPermutations] = useState(true);\n    const [minWordLength, setMinWordLength] = useState(3);\n    const [minMaxWordLength, setMinMaxWordLength] = useState(5);\n    const [contains, setContains] = useState(\"\");\n    const [startWith, setStartWith] = useState(\"\");\n\n    let diplayedAnagrams = props.anagrams;\n    if (filterPermutations) {\n        const uniques = new Set(props.anagrams.map(sentence => sentence.split(\" \").sort().join(\" \")));\n        diplayedAnagrams = [...uniques];\n    }\n    diplayedAnagrams = diplayedAnagrams\n        .filter(sentence => sentence.split(\" \").every(word => word.length >= minWordLength));\n    diplayedAnagrams = diplayedAnagrams\n        .filter(sentence => sentence.split(\" \").find(word => word.length >= minMaxWordLength))\n    diplayedAnagrams = diplayedAnagrams\n        .filter(sentence => sentence.includes(contains));\n    diplayedAnagrams = diplayedAnagrams\n        .filter(sentence => sentence.split(\" \").find(word => word.startsWith(startWith)));\n\n    return (<>\n        <h4>{diplayedAnagrams.length} r√©sultat(s)</h4>\n        <div>\n            <div>\n                <label htmlFor=\"minWordLength\">Taille minimale des mots</label>\n                <input type=\"number\" id=\"minWordLength\" value={minWordLength} onChange={(e) => setMinWordLength(parseInt(e.target.value))}/>\n            </div>\n            <div>\n                <label htmlFor=\"minMaxWordLength\">Taille minimale du mot le plus long</label>\n                <input type=\"number\" id=\"minMaxWordLength\" value={minMaxWordLength} onChange={(e) => setMinMaxWordLength(parseInt(e.target.value))}/>\n            </div>\n            <div>\n                <label htmlFor=\"contains\">Contient</label>\n                <input type=\"text\" id=\"contains\" value={contains} onChange={(e) => setContains(e.target.value)}/>\n            </div>\n            <div>\n                <label htmlFor=\"startWith\">A un mot qui commence par</label>\n                <input type=\"text\" id=\"startWith\" value={startWith} onChange={(e) => setStartWith(e.target.value)}/>\n            </div>\n            {filterPermutations ?\n                <button onClick={() => setFilterPermutations(false)}>Ne pas filtrer les permutations</button> :\n                <button onClick={() => setFilterPermutations(true)}>Filtrer les permutations</button>\n            }\n        </div>\n        <ul>\n            {diplayedAnagrams.map((a, i) => <li key={i}>{a}</li>)}\n        </ul>\n    </>)\n};\n","import React, {useEffect, useState} from \"react\";\nimport {Node} from \"../algorithm/Node\";\nimport {Result} from \"./Result\";\n\nconst node = Node.newRoot();\nexport const Anagram: React.FC = () => {\n    const [anagrams, setAnagrams] = useState<string[] | null>(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const [sentence, setSentence] = useState(\"bon courage\");\n\n    useEffect(() => {\n        setIsLoading(true);\n        fetch(process.env.PUBLIC_URL + \"/data/dictionary_fr.txt\")\n            .then(r => r.text())\n            .then(body => body.split(\"\\n\"))\n            .then(entries => {\n                entries.forEach(entry => {\n                    node.add(entry.replaceAll(\"\\r\", \"\"))\n                });\n                setIsLoading(false);\n            });\n    }, []);\n\n    const searchAnagrams = (e: React.FormEvent<HTMLFormElement> | React.MouseEvent<HTMLButtonElement>) => {\n        const results = Array.from(node.anagram(sentence, 1));\n        setAnagrams(results);\n        e.preventDefault();\n    };\n\n    return (<>\n        <h1>Anagrammes</h1>\n        {isLoading ? <p>Chargement du dictionnaire...</p> : null}\n        <form onSubmit={searchAnagrams}>\n            <div>\n                <label htmlFor=\"sentence\">Phrase</label>\n                <input type=\"text\" name=\"sentence\" autoFocus={true} value={sentence} onChange={(e) => setSentence(e.target.value)}/>\n            </div>\n            <button disabled={isLoading} onClick={searchAnagrams}>Rechercher les anagrammes</button>\n        </form>\n        { anagrams ? <Result anagrams={anagrams} /> : null}\n    </>);\n}\n","import React from 'react';\nimport './App.css';\nimport {Anagram} from \"./components/Anagram\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Anagram/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}