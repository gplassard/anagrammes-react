{"version":3,"sources":["algorithm/Node.ts","components/Anagram.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Node","letter","final","depth","childrens","letters","node","this","chars","toLowerCase","forEach","char","index","undefined","length","minWordSize","tiles","replaceAll","minLength","anagrams","path","root","word","join","Object","entries","count","newRoot","Anagram","useState","setAnagrams","isLoading","setIsLoading","sentence","setSentence","useEffect","fetch","process","then","r","text","body","split","entry","add","searchAnagrams","e","results","Array","from","anagram","preventDefault","onSubmit","htmlFor","type","name","autoFocus","value","onChange","target","disabled","onClick","map","a","i","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aada196f.chunk.js","sourcesContent":["// Source: https://prograide.com/pregunta/46535/algorithme-pour-generer-des-anagrammes\n\nexport class Node {\n    static newRoot(): Node {\n        return new Node('', false, 0);\n    }\n\n    constructor(public readonly letter: string,\n                public final: boolean,\n                public readonly depth: number,\n                public childrens: { [k in string]: Node } = {}) {\n    }\n\n    public add(letters: string): void {\n        let node: Node = this;\n        const chars = [...letters.toLowerCase()];\n        chars.forEach((char, index) => {\n            if (node.childrens[char] === undefined) {\n                node.childrens[char] = new Node(char, index === chars.length - 1, index + 1)\n            }\n            node = node.childrens[char];\n        });\n    }\n\n    public anagram(letters: string, minWordSize = 3): Generator<string> {\n        const tiles: { [k in string]: number } = {};\n        const chars = [...letters.replaceAll(' ', '').toLowerCase()];\n        chars.forEach((char) => {\n            tiles[char] = (tiles[char] || 0) + 1\n        });\n        const minLength = chars.length;\n        return this.anagrams(tiles, [], this, minLength, minWordSize);\n    }\n\n    private* anagrams(tiles: { [p: string]: number }, path: string[], root: Node, minLength: number, minWordSize: number): Generator<string> {\n        if (this.final && this.depth >= minWordSize) {\n            const word = path.join('');\n            const length = word.replaceAll(' ', '').length;\n            if (length >= minLength) {\n                yield word;\n            }\n            for (const word of root.anagrams(tiles, [...path, ' '], root, minLength, minWordSize)) {\n                yield word;\n            }\n        }\n        for (const [letter, node] of Object.entries(this.childrens)) {\n            const count = tiles[letter] || 0;\n            if (count === 0) {\n                continue;\n            }\n            tiles[letter] = count - 1;\n            for (const word of node.anagrams(tiles, [...path, letter], root, minLength, minWordSize)) {\n                yield word;\n            }\n            tiles[letter] = count;\n        }\n    }\n}\n","import React, {useEffect, useState} from \"react\";\nimport {Node} from \"../algorithm/Node\";\n\nconst node = Node.newRoot();\nexport const Anagram: React.FC = () => {\n    const [anagrams, setAnagrams] = useState<string[] | null>(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const [sentence, setSentence] = useState(\"bon courage\");\n\n    useEffect(() => {\n        setIsLoading(true);\n        fetch(process.env.PUBLIC_URL + \"/data/dictionary_fr.txt\")\n            .then(r => r.text())\n            .then(body => body.split(\"\\n\"))\n            .then(entries => {\n                entries.forEach(entry => {\n                    node.add(entry.replaceAll(\"\\r\", \"\"))\n                });\n                setIsLoading(false);\n            });\n    }, []);\n\n    const searchAnagrams = (e: React.FormEvent<HTMLFormElement> | React.MouseEvent<HTMLButtonElement>) => {\n        const results = Array.from(node.anagram(sentence, 3));\n        setAnagrams(results);\n        e.preventDefault();\n    };\n\n    return (<>\n        {anagrams == null ?  <h1>Anagrammes</h1> : <h1>Anagrammes ({anagrams.length} r√©sultat(s))</h1>}\n        {isLoading ? <p>Chargement du dictionnaire...</p> : null}\n        <form onSubmit={searchAnagrams}>\n            <label htmlFor=\"sentence\">Phrase</label>\n            <input type=\"text\" name=\"sentence\" autoFocus={true} value={sentence} onChange={(e) => setSentence(e.target.value)}/>\n            <button disabled={isLoading} onClick={searchAnagrams}>Rechercher les anagrammes</button>\n        </form>\n        <ul>\n            {(anagrams || []).map((a, i) => (<li key={i}>{a}</li>))}\n        </ul>\n    </>);\n}\n","import React from 'react';\nimport './App.css';\nimport {Anagram} from \"./components/Anagram\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Anagram/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}